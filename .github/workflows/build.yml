name: 发布发行版

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created }}

    steps:
      - name: 运行 release-please-action
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

  build:
    needs: release
    if: needs.release.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.get-package-name.outputs.name }}
      package_short_name: ${{ steps.get-package-name.outputs.PACKAGE_SHORT_NAME }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.13.2
          run_install: |
            - args: [--no-frozen-lockfile]

      - name: 获取包名
        id: get-package-name
        run: |
          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          PACKAGE_SHORT_NAME=$(pnpm pkg get name | tr -d '"' | awk -F'/' '{print $2}')
          echo "PACKAGE_SHORT_NAME=$PACKAGE_SHORT_NAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: 构建
        id: build-package
        run: |
          pnpm build
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/temp/
          cp -r package.json README.md CHANGELOG.md dist ${{ runner.temp }}/temp/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-package-name.outputs.PACKAGE_SHORT_NAME }}
          path: ${{ runner.temp }}/temp/

  publish-to-npm:
    runs-on: ubuntu-latest
    needs: [release, build]
    steps:
      - name: 导入构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.package_short_name }}
          path: ./

      - name: 发布到 NPM
        id: publish-to-npm
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          registry: https://registry.npmjs.org/
          access: public
          provenance: true

      - name: 生成发布摘要
        run: |
          echo "## 发布信息 :" >> $GITHUB_STEP_SUMMARY
          echo "包名: \`${{ steps.publish-to-npm.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "版本号: \`${{ steps.publish-to-npm.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY

  syncn:
    runs-on: ubuntu-latest
    needs:
      [publish-to-npm]
    steps:
      - name: 同步镜像源
        run: |
          curl -X PUT "https://registry-direct.npmmirror.com/-/package/@ikenxuan/amagi/syncs"

  sync-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
          run_install: |
            - args: [--no-frozen-lockfile]
      
      - name: 构建
        run: |
          echo "开始构建项目..."
          pnpm build
          if [ $? -ne 0 ]; then
            echo "构建失败，退出工作流"
            exit 1
          fi
          echo "构建成功，准备复制文件..."
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/temp/
          # 复制所有必要文件，包括完整的 lib 目录
          cp -r package.json CHANGELOG.md README.md LICENSE resources config lib ${{ runner.temp }}/temp/
          echo "文件已复制到临时目录"

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git 用户已配置"

      - name: 获取最新的主分支
        run: |
          echo "获取最新的主分支..."
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }} --ff-only
          echo "当前分支: $(git branch --show-current)"

      - name: 获取主分支的最新提交消息
        id: commit-message
        run: |
          echo "获取最新提交消息..."
          echo "commit_msg=$(git log origin/${{ github.ref_name }} -1 --pretty=format:'%s')" >> $GITHUB_ENV
          echo "提交消息: ${{ env.commit_msg }}"

      - name: 检查编译分支是否存在
        id: check-branch
        run: |
          echo "检查编译分支是否存在..."
          if git ls-remote --exit-code origin build; then
            echo "branch_exists=true" >> $GITHUB_ENV
            echo "编译分支存在"
          else
            echo "branch_exists=false" >> $GITHUB_ENV
            echo "编译分支不存在，将创建新分支"
          fi

      - name: 创建或切换到编译分支
        run: |          
          echo "开始处理编译分支..."
          if [ "${{ env.branch_exists }}" = "false" ]; then
            echo "创建新的编译分支..."
            git checkout --orphan build
            git reset --hard
            git clean -fd
            git commit --allow-empty -m "初始化编译分支"
            git push --set-upstream -f origin build
            echo "新编译分支已创建并推送"
          else
            echo "切换到现有编译分支..."
            git fetch origin build
            git reset --hard
            git clean -fd
            git reset --hard origin/build
            git checkout build
            echo "已切换到编译分支: $(git branch --show-current)"
          fi

      - name: 构建文件
        run: |
          echo "准备构建文件..."
          # 清空当前目录但保留.git文件夹
          find . -mindepth 1 -maxdepth 1 -not -name '.git' -exec rm -rf {} \;
          echo "已清理现有文件，保留.git目录"
          
          # 显示临时目录中的文件
          echo "临时目录中的文件:"
          ls -la ${{ runner.temp }}/temp/
          
          # 复制构建产物到当前目录
          echo "复制构建产物..."
          cp -rv ${{ runner.temp }}/temp/* ./
          
      - name: 从main分支复制文件到build分支
        run: |
          # 创建一个检查文件是否存在并检出的函数
          checkout_if_exists() {
            if git ls-tree -r --name-only origin/main | grep -q "^$1$"; then
              if [ "$1" != "package.json" ]; then
                git checkout main -- "$1"
                echo "已检出: $1"
              else
                echo "跳过检出 package.json，保留修改版本"
              fi
            else
              echo "文件不存在，跳过: $1"
            fi
          }
          
          # 逐个检查并检出文件
          checkout_if_exists "package.json"
          checkout_if_exists "CHANGELOG.md"
          checkout_if_exists "README.md"
          checkout_if_exists "LICENSE"
          checkout_if_exists "config"
          checkout_if_exists "resources"

      - name: 删除开发依赖 
        run: node lib/cli/pr.js clean

      - name: 根据main分支的commit信息生成提交消息
        run: |
          # 在提交前忽略 lib/cli 目录
          echo "lib/cli/" >> .gitignore
          
          # 显示当前工作目录的状态
          echo "当前工作目录状态:"
          git status
          
          # 显示与暂存区的差异
          echo "与暂存区的差异:"
          git diff
          
          git add .
          
          # 显示已暂存的变更
          echo "已暂存的变更:"
          git diff --cached
          
          if [ -z "$(git diff --cached --name-only)" ]; then
            echo "No changes detected"
            exit 0
          else
            git commit -m "chore(build): ${{ github.event.head_commit.message }}"
          fi

      - name: 设置 build 分支的上游分支
        run: git push --set-upstream origin build

      - name: 推送到 build 分支
        uses: ad-m/github-push-action@master
        with:
          branch: build
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_with_lease: true
          args: --set-upstream