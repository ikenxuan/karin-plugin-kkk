name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  # 版本发布管理
  version-release:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created }}
      core_release_created: ${{ steps.release-please.outputs['packages/core--release_created'] }}
      core_tag_name: ${{ steps.release-please.outputs['packages/core--tag_name'] }}
      core_version: ${{ steps.get-version-info.outputs.core_version }}
      should_upload_release: ${{ steps.get-version-info.outputs.should_upload_release }}
      release_tag_name: ${{ steps.get-version-info.outputs.release_tag_name }}

    steps:
      - name: 🚀 执行版本发布检查
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ 获取版本信息
        id: get-version-info
        run: |
          cd packages/core
          CORE_VERSION=$(node -p "require('./package.json').version")
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ steps.release-please.outputs.core_release_created }}" = "true" ]; then
            echo "should_upload_release=true" >> $GITHUB_OUTPUT
            echo "release_tag_name=${{ steps.release-please.outputs.core_tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "should_upload_release=false" >> $GITHUB_OUTPUT
            echo "release_tag_name=" >> $GITHUB_OUTPUT
          fi

  # 统一构建作业 - 解决重复编译问题
  unified-build:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      package_name: ${{ steps.package-info.outputs.name }}
      package_short_name: ${{ steps.package-info.outputs.short_name }}
      commit_hash: ${{ steps.git-info.outputs.commit_hash }}
      short_commit_hash: ${{ steps.git-info.outputs.short_commit_hash }}
      commit_message: ${{ steps.git-info.outputs.commit_message }}
      commit_author: ${{ steps.git-info.outputs.commit_author }}
      files_changed: ${{ steps.git-info.outputs.files_changed }}
      lines_added: ${{ steps.git-info.outputs.lines_added }}
      lines_deleted: ${{ steps.git-info.outputs.lines_deleted }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📦 安装依赖
        run: pnpm install

      - name: 🔨 执行完整项目构建
        run: |
          echo "开始构建所有包..."
          pnpm build
          if [ $? -ne 0 ]; then
            echo "构建失败，退出工作流"
            exit 1
          fi
          echo "构建成功"

      - name: 🏷️ 获取包信息
        id: package-info
        working-directory: packages/core
        run: |
          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          PACKAGE_SHORT_NAME=$(basename "$PACKAGE_NAME")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "short_name=$PACKAGE_SHORT_NAME" >> $GITHUB_OUTPUT

      - name: 📊 获取 Git 信息
        id: git-info
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "short_commit_hash=$SHORT_COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          
          # 获取文件变更统计
          FILES_CHANGED=$(git diff --name-only HEAD~1 HEAD | wc -l)
          LINES_ADDED=$(git diff --numstat HEAD~1 HEAD | awk '{added += $1} END {print added+0}')
          LINES_DELETED=$(git diff --numstat HEAD~1 HEAD | awk '{deleted += $2} END {print deleted+0}')
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT

      - name: 📦 准备发布产物 (正式版)
        if: needs.version-release.outputs.core_release_created == 'true'
        run: |
          cd packages/core
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/production/
          cp -r package.json README.md CHANGELOG.md LICENSE config resources lib ${{ runner.temp }}/production/

      - name: 📦 准备构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd packages/core
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/build-branch/
          cp -r package.json CHANGELOG.md README.md LICENSE resources config lib ${{ runner.temp }}/build-branch/

      - name: 📦 准备预览包产物
        run: |
          cd packages/core
          # 为预览包保留 devDependencies（稍后会删除）
          mkdir -p ${{ runner.temp }}/preview/
          cp -r package.json README.md CHANGELOG.md LICENSE config resources lib ${{ runner.temp }}/preview/

      - name: 📤 上传正式版构建产物
        if: needs.version-release.outputs.core_release_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: ${{ runner.temp }}/production/

      - name: 📤 上传构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-branch-artifacts
          path: ${{ runner.temp }}/build-branch/

      - name: 📤 上传预览包产物
        uses: actions/upload-artifact@v4
        with:
          name: preview-build
          path: ${{ runner.temp }}/preview/

      - name: ✅ 标记构建状态
        id: build-status
        run: echo "success=true" >> $GITHUB_OUTPUT

  # NPM 正式发布 (仅 core 包)
  npm-production-publish:
    runs-on: ubuntu-latest
    needs: [version-release, unified-build]
    if: needs.version-release.outputs.core_release_created == 'true' && needs.unified-build.outputs.build_success == 'true'
    steps:
      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./

      - name: 🚀 发布到 NPM 官方源
        id: publish-to-npm
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          registry: https://registry.npmjs.org/
          access: public
          provenance: true

      - name: 📊 生成发布报告
        run: |
          echo "## 📦 发布信息" >> $GITHUB_STEP_SUMMARY
          echo "包名: \`${{ steps.publish-to-npm.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "版本号: \`${{ steps.publish-to-npm.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY

  # 镜像源同步
  npm-mirror-sync:
    runs-on: ubuntu-latest
    needs: [npm-production-publish]
    steps:
      - name: 🔄 同步到国内镜像源
        run: |
          curl -X PUT "https://registry-direct.npmmirror.com/-/package/karin-plugin-kkk/syncs"

  # 构建分支同步
  build-branch-sync:
    runs-on: ubuntu-latest
    needs: [unified-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.unified-build.outputs.build_success == 'true'
    outputs:
      build_completed: ${{ steps.build-success.outputs.completed }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-branch-artifacts
          path: ${{ runner.temp }}/build-artifacts/
      
      - name: ✅ 标记构建完成
        id: build-success
        run: echo "completed=true" >> $GITHUB_OUTPUT
      
      - name: ⚙️ 配置 Git 用户信息
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🔄 同步主分支最新代码
        run: |
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }} --ff-only

      - name: 🔍 检查构建分支状态
        id: check-branch
        run: |
          if git ls-remote --exit-code origin build; then
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      - name: 🌿 初始化构建分支
        run: |          
          if [ "${{ env.branch_exists }}" = "false" ]; then
            git checkout --orphan build
            git reset --hard
            git clean -fd
            git commit --allow-empty -m "初始化编译分支"
            git push --set-upstream -f origin build
          else
            git fetch origin build
            git reset --hard
            git clean -fd
            git reset --hard origin/build
            git checkout build
          fi

      - name: 🗂️ 准备构建文件
        run: |
          find . -mindepth 1 -maxdepth 1 -not -name '.git' -exec rm -rf {} \;
          cp -rv ${{ runner.temp }}/build-artifacts/* ./
          
      - name: 📋 同步必要文件
        run: |
          checkout_if_exists() {
            if git ls-tree -r --name-only origin/main | grep -q "^packages/core/$1$"; then
              if [ "$1" != "package.json" ]; then
                git checkout main -- "packages/core/$1" 2>/dev/null || true
              fi
            fi
          }
          
          checkout_if_exists "CHANGELOG.md" || true
          checkout_if_exists "README.md" || true
          checkout_if_exists "LICENSE" || true
          checkout_if_exists "config" || true
          checkout_if_exists "resources" || true

      - name: 💾 提交构建结果
        run: |
          git add .
          if [ -z "$(git diff --cached --name-only)" ]; then
            echo "No changes detected"
            exit 0
          else
            git commit -m "chore(build): ${{ needs.unified-build.outputs.commit_message }}"
          fi

      - name: 🚀 推送到构建分支
        uses: ad-m/github-push-action@master
        with:
          branch: build
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_with_lease: true

  # 预览包发布
  preview-package-publish:
    runs-on: ubuntu-latest
    needs: [unified-build]
    if: needs.unified-build.outputs.build_success == 'true'
    outputs:
      pkg_version: ${{ steps.version-gen.outputs.version }}
      pnpm_install_cmd: ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
      stackblitz_url: ${{ steps.publish_pkg.outputs.stackblitz_url }}
      pack_time: ${{ steps.publish_pkg.outputs.pack_time }}
      build_duration: ${{ steps.publish_pkg.outputs.build_duration }}
      node_version: ${{ steps.publish_pkg.outputs.node_version }}
      pnpm_version: ${{ steps.publish_pkg.outputs.pnpm_version }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: preview-build
          path: ./

      - name: 🏷️ 生成版本标识
        id: version-gen
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          COMMIT_COUNT=$(git rev-list --count HEAD)
          TIMESTAMP=$(date +%s)
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [[ "${{ github.head_ref }}" == release-please--branches--* ]]; then
              TIME_SUFFIX=$(TZ='Asia/Shanghai' date +%m%d%H%M)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-rc.${TIME_SUFFIX}"
            else
              PR_NUMBER=${{ github.event.number }}
              PR_COMMIT_COUNT=$(git rev-list --count HEAD ^origin/main)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.${PR_NUMBER}.${PR_COMMIT_COUNT}"
            fi
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TIME_SUFFIX=$(echo $TIMESTAMP | tail -c 5)
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-beta.${COMMIT_COUNT}.${TIME_SUFFIX}"
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-dev.${BRANCH_NAME}.${{ needs.unified-build.outputs.short_commit_hash }}"
          fi
          
          npm version $NEW_VERSION --no-git-tag-version
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🧹 清理开发依赖
        run: pnpm pkg delete devDependencies

      - name: 🚀 发布预览包
        id: publish_pkg
        run: |
          START_TIME=$(date +%s)
          
          pnpm dlx pkg-pr-new publish --json output.json --comment=update --compact --packageManager=pnpm > pkg-output.txt 2>&1
          
          ACTUAL_INSTALL_URL=$(grep -oE 'https://pkg\.pr\.new/[^[:space:]`]+' pkg-output.txt | head -n 1 || echo "")
          
          if [ ! -z "$ACTUAL_INSTALL_URL" ]; then
            PNPM_INSTALL_CMD="pnpm add ${ACTUAL_INSTALL_URL} -w"
          else
            PNPM_INSTALL_CMD="未找到安装命令"
          fi
          
          echo "pnpm_install_cmd=$PNPM_INSTALL_CMD" >> $GITHUB_OUTPUT
          
          # 获取 Stackblitz URL
          STACKBLITZ_URL=""
          if [ -f "output.json" ]; then
            STACKBLITZ_URL=$(node -p "try { const data = require('./output.json'); data.templates && data.templates[0] ? data.templates[0].url : ''; } catch(e) { ''; }" || echo "")
          fi
          echo "stackblitz_url=$STACKBLITZ_URL" >> $GITHUB_OUTPUT
          
          # 时间信息
          PACK_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
          echo "pack_time=$PACK_TIME" >> $GITHUB_OUTPUT
          
          # 构建耗时
          END_TIME=$(date +%s)
          BUILD_DURATION=$((END_TIME - START_TIME))
          BUILD_DURATION_MIN=$((BUILD_DURATION / 60))
          BUILD_DURATION_SEC=$((BUILD_DURATION % 60))
          if [ $BUILD_DURATION_MIN -gt 0 ]; then
            DURATION_TEXT="${BUILD_DURATION_MIN}分${BUILD_DURATION_SEC}秒"
          else
            DURATION_TEXT="${BUILD_DURATION_SEC}秒"
          fi
          echo "build_duration=$DURATION_TEXT" >> $GITHUB_OUTPUT
          
          # 环境信息
          NODE_VERSION=$(node --version)
          PNPM_VERSION=$(pnpm --version)
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

      - name: 💬 发布 PR 评论
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功 
            
            ### 🏷️ 包信息
            - **版本:** `${{ steps.version-gen.outputs.version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})
            
            ### 📥 安装命令
            ```bash
            ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
            ```
            
            ### 🖥️ Windows 桌面应用
            - **状态:** 🔄 构建中...
            
            ### 🚀 快速体验
            ${{ steps.publish_pkg.outputs.stackblitz_url && format('- [🌐 Stackblitz]({0})', steps.publish_pkg.outputs.stackblitz_url) || '- 🌐 Stackblitz 暂不可用' }}
            - [📋 构建日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 📊 变更信息
            - **提交:** ${{ needs.unified-build.outputs.commit_message }}
            - **作者:** ${{ needs.unified-build.outputs.commit_author }}
            - **文件:** ${{ needs.unified-build.outputs.files_changed }} 个
            - **代码:** +${{ needs.unified-build.outputs.lines_added }} -${{ needs.unified-build.outputs.lines_deleted }} 行
            
            ### ⏰ 时间信息
            - **打包时间:** `${{ steps.publish_pkg.outputs.pack_time }} (CST)`
            - **构建耗时:** ${{ steps.publish_pkg.outputs.build_duration }}
            
            ---
            > 💡 桌面应用构建完成后将自动更新此评论
          comment-tag: published-packages
          mode: upsert
          reactions: rocket, eyes

  # 桌面应用构建
  desktop-build:
    needs: [version-release, unified-build]
    if: needs.unified-build.outputs.build_success == 'true'
    uses: ./.github/workflows/build-desktop.yml
    with:
      core_version: ${{ needs.version-release.outputs.core_version }}
      should_upload_release: ${{ needs.version-release.outputs.should_upload_release == 'true' }}
      release_tag_name: ${{ needs.version-release.outputs.release_tag_name }}

  # 桌面应用完成后更新 PR 评论
  update-pr-comment-with-desktop:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish, desktop-build]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: 🏷️ 获取当前时间
        run: |
          CURRENT_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_ENV
  
      - name: 💬 更新 PR 评论
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功 
            
            ### 🏷️ 包信息
            - **版本:** `${{ needs.preview-package-publish.outputs.pkg_version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})
            
            ### 📥 安装命令
            ```bash
            ${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}
            ```
            
            ### 🖥️ Windows 桌面应用
            ${{ needs.desktop-build.result == 'success' && '- **状态:** ✅ 构建成功' || '- **状态:** ❌ 构建失败' }}
            ${{ needs.desktop-build.result == 'success' && format('- **版本:** `{0}`', needs.desktop-build.outputs.desktop_version) || '' }}
            ${{ needs.desktop-build.result == 'success' && format('- **下载:** [点击下载]({0})', needs.desktop-build.outputs.artifact_url) || '' }}
            
            ### 🚀 快速体验
            ${{ needs.preview-package-publish.outputs.stackblitz_url && format('- [🌐 Stackblitz]({0})', needs.preview-package-publish.outputs.stackblitz_url) || '- 🌐 Stackblitz 暂不可用' }}
            - [📋 构建日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 📊 变更信息
            - **提交:** ${{ needs.unified-build.outputs.commit_message }}
            - **作者:** ${{ needs.unified-build.outputs.commit_author }}
            - **文件:** ${{ needs.unified-build.outputs.files_changed }} 个
            - **代码:** +${{ needs.unified-build.outputs.lines_added }} -${{ needs.unified-build.outputs.lines_deleted }} 行
            
            ### ⏰ 时间信息
            - **打包时间:** `${{ needs.preview-package-publish.outputs.pack_time }} (CST)`
            - **更新时间:** `${{ env.CURRENT_TIME }} (CST)`
            - **构建耗时:** ${{ needs.preview-package-publish.outputs.build_duration }}
            
            ### 🛠️ 环境信息
            - **Node.js:** `${{ needs.preview-package-publish.outputs.node_version }}`
            - **PNPM:** `${{ needs.preview-package-publish.outputs.pnpm_version }}`
            
            ---
          comment-tag: published-packages
          mode: upsert
          reactions: rocket, eyes, hooray