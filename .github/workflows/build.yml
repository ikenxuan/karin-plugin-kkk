name: CI/CD

on:
  workflow_dispatch:
    inputs:
      # 手动运行模式选择
      run_mode:
        description: '运行模式'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      
      # 手动发布版本号（仅生产模式需要）
      manual_version:
        description: '手动指定版本号 (如: 1.2.3，仅生产模式有效)'
        required: false
        type: string
      
      # 发布说明
      release_notes:
        description: '发布说明 (可选)'
        required: false
        type: string
      
      # 是否跳过桌面应用构建
      skip_desktop:
        description: '跳过桌面应用构建'
        required: false
        default: false
        type: boolean
      
      # 是否强制发布到 NPM
      force_npm_publish:
        description: '强制发布到 NPM (仅生产模式)'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

env:
  APP_NAME: karin-plugin-kkk

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  # 版本发布管理
  version-release:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created || steps.manual-release.outputs.releases_created }}
      core_release_created: ${{ steps.release-please.outputs['packages/core--release_created'] || steps.manual-release.outputs.core_release_created }}
      core_tag_name: ${{ steps.release-please.outputs['packages/core--tag_name'] || steps.manual-release.outputs.core_tag_name }}
      core_version: ${{ steps.get-version-info.outputs.core_version }}
      should_upload_release: ${{ steps.get-version-info.outputs.should_upload_release }}
      release_tag_name: ${{ steps.get-version-info.outputs.release_tag_name }}
      is_manual_production: ${{ steps.get-version-info.outputs.is_manual_production }}
      manual_release_notes: ${{ steps.get-version-info.outputs.manual_release_notes }}

    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 自动版本发布检查（非手动生产模式）
      - name: 🚀 执行版本发布检查
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          release-please-version: "17.1.2"

      # 手动生产发布处理
      - name: 🎯 处理手动生产发布
        if: github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production'
        id: manual-release
        run: |
          if [ -z "${{ inputs.manual_version }}" ]; then
            echo "❌ 生产模式必须指定版本号" >&2
            exit 1
          fi
          
          # 验证版本号格式
          if ! echo "${{ inputs.manual_version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "❌ 版本号格式错误，应为 x.y.z 格式" >&2
            exit 1
          fi
          
          echo "releases_created=true" >> $GITHUB_OUTPUT
          echo "core_release_created=true" >> $GITHUB_OUTPUT
          echo "core_tag_name=v${{ inputs.manual_version }}" >> $GITHUB_OUTPUT
          
          echo "✅ 手动生产发布已配置：v${{ inputs.manual_version }}"

      - name: 🏷️ 获取版本信息
        id: get-version-info
        run: |
          cd packages/core
          
          # 处理手动生产模式
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.run_mode }}" = "production" ]; then
            # 手动更新 package.json 版本号
            npm version ${{ inputs.manual_version }} --no-git-tag-version
            CORE_VERSION="${{ inputs.manual_version }}"
            echo "should_upload_release=true" >> $GITHUB_OUTPUT
            echo "release_tag_name=v${{ inputs.manual_version }}" >> $GITHUB_OUTPUT
            echo "is_manual_production=true" >> $GITHUB_OUTPUT
            echo "manual_release_notes=${{ inputs.release_notes }}" >> $GITHUB_OUTPUT
            echo "🎯 手动生产模式：版本 $CORE_VERSION"
          else
            # 自动模式或预览模式
            CORE_VERSION=$(node -p "require('./package.json').version")
            echo "is_manual_production=false" >> $GITHUB_OUTPUT
            echo "manual_release_notes=" >> $GITHUB_OUTPUT
            
            if [ "${{ steps.release-please.outputs.core_release_created }}" = "true" ] || [ "${{ inputs.force_npm_publish }}" = "true" ]; then
              echo "should_upload_release=true" >> $GITHUB_OUTPUT
              echo "release_tag_name=${{ steps.release-please.outputs.core_tag_name }}" >> $GITHUB_OUTPUT
            else
              echo "should_upload_release=false" >> $GITHUB_OUTPUT
              echo "release_tag_name=" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "📦 当前版本：$CORE_VERSION"

  # 统一构建作业（仅核心包和Web应用）
  unified-build:
    runs-on: ubuntu-latest
    needs: [version-release]
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      package_name: ${{ steps.package-info.outputs.name }}
      package_short_name: ${{ steps.package-info.outputs.short_name }}
      commit_hash: ${{ steps.git-info.outputs.commit_hash }}
      short_commit_hash: ${{ steps.git-info.outputs.short_commit_hash }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📦 安装依赖
        run: pnpm install

      - name: 🔨 执行完整项目构建
        run: |
          echo "开始构建所有包..."
          pnpm build
          if [ $? -ne 0 ]; then
            echo "❌ 构建失败，退出工作流"
            exit 1
          fi
          echo "✅ 构建成功"

      - name: 🏷️ 获取包信息
        id: package-info
        working-directory: packages/core
        run: |
          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          PACKAGE_SHORT_NAME=$(basename "$PACKAGE_NAME")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "short_name=$PACKAGE_SHORT_NAME" >> $GITHUB_OUTPUT

      - name: 📊 获取 Git 信息
        id: git-info
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "short_commit_hash=$SHORT_COMMIT_HASH" >> $GITHUB_OUTPUT

      # 手动生产模式：应用版本号变更
      - name: 🎯 应用手动版本号
        if: github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production'
        run: |
          cd packages/core
          npm version ${{ inputs.manual_version }} --no-git-tag-version
          echo "✅ 已应用手动版本号：${{ inputs.manual_version }}"

      - name: 📦 准备发布产物 (正式版)
        if: needs.version-release.outputs.core_release_created == 'true' || (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production')
        run: |
          cd packages/core
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/production/
          cp -r package.json README.md CHANGELOG.md LICENSE config resources lib ${{ runner.temp }}/production/

      - name: 📦 准备构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd packages/core
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/build-branch/
          cp -r package.json CHANGELOG.md README.md LICENSE resources config lib ${{ runner.temp }}/build-branch/

      - name: 📦 准备预览包产物
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        run: |
          cd packages/core
          mkdir -p ${{ runner.temp }}/preview/
          cp -r package.json README.md CHANGELOG.md LICENSE config resources lib ${{ runner.temp }}/preview/

      - name: 📤 上传正式版构建产物
        if: needs.version-release.outputs.core_release_created == 'true' || (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production')
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: ${{ runner.temp }}/production/

      - name: 📤 上传构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-branch-artifacts
          path: ${{ runner.temp }}/build-branch/

      - name: 📤 上传预览包产物
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        uses: actions/upload-artifact@v4
        with:
          name: preview-build
          path: ${{ runner.temp }}/preview/

      - name: ✅ 标记构建状态
        id: build-status
        run: echo "success=true" >> $GITHUB_OUTPUT

  # NPM 正式发布
  npm-production-publish:
    runs-on: ubuntu-latest
    needs: [version-release, unified-build]
    if: |
      needs.unified-build.outputs.build_success == 'true' && (
        needs.version-release.outputs.core_release_created == 'true' ||
        (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production') ||
        inputs.force_npm_publish == true
      )
    steps:
      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./

      - name: 🚀 发布到 NPM 官方源
        id: publish-to-npm
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          registry: https://registry.npmjs.org/
          access: public
          provenance: true

      - name: 📊 生成发布报告
        run: |
          echo "## 📦 NPM 发布成功" >> $GITHUB_STEP_SUMMARY
          echo "- **包名:** \`${{ steps.publish-to-npm.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ steps.publish-to-npm.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **模式:** ${{ github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production' && '🎯 手动生产发布' || '🤖 自动发布' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.version-release.outputs.manual_release_notes }}" != "" ]; then
            echo "- **发布说明:** ${{ needs.version-release.outputs.manual_release_notes }}" >> $GITHUB_STEP_SUMMARY
          fi

  # 镜像源同步
  npm-mirror-sync:
    runs-on: ubuntu-latest
    needs: [npm-production-publish]
    steps:
      - name: 🔄 同步到国内镜像源
        run: |
          curl -X PUT "https://registry-direct.npmmirror.com/-/package/karin-plugin-kkk/syncs"

  # 构建分支同步
  build-branch-sync:
    runs-on: ubuntu-latest
    needs: [unified-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.unified-build.outputs.build_success == 'true'
    outputs:
      build_completed: ${{ steps.build-success.outputs.completed }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-branch-artifacts
          path: ${{ runner.temp }}/build-artifacts/
      
      - name: ✅ 标记构建完成
        id: build-success
        run: echo "completed=true" >> $GITHUB_OUTPUT
      
      - name: ⚙️ 配置 Git 用户信息
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🔄 同步主分支最新代码
        run: |
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }} --ff-only

      - name: 🔍 检查构建分支状态
        id: check-branch
        run: |
          if git ls-remote --exit-code origin build; then
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      - name: 🌿 初始化构建分支
        run: |          
          if [ "${{ env.branch_exists }}" = "false" ]; then
            git checkout --orphan build
            git reset --hard
            git clean -fd
            git commit --allow-empty -m "初始化编译分支"
            git push --set-upstream -f origin build
          else
            git fetch origin build
            git reset --hard
            git clean -fd
            git reset --hard origin/build
            git checkout build
          fi

      - name: 🗂️ 准备构建文件
        run: |
          find . -mindepth 1 -maxdepth 1 -not -name '.git' -exec rm -rf {} \;
          cp -rv ${{ runner.temp }}/build-artifacts/* ./

      - name: 💾 提交构建结果
        run: |
          git add .
          if [ -z "$(git diff --cached --name-only)" ]; then
            echo "No changes detected"
            exit 0
          else
            git commit -m "chore(build): 构建分支同步"
          fi

      - name: 🚀 推送到构建分支
        uses: ad-m/github-push-action@master
        with:
          branch: build
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_with_lease: true

  # 预览包发布（优先执行）
  preview-package-publish:
    runs-on: ubuntu-latest
    needs: [unified-build]
    if: needs.unified-build.outputs.build_success == 'true' && (github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production')
    outputs:
      pkg_version: ${{ steps.version-gen.outputs.version }}
      pnpm_install_cmd: ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: preview-build
          path: ./

      - name: 🏷️ 生成版本标识
        id: version-gen
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          COMMIT_COUNT=$(git rev-list --count HEAD)
          TIMESTAMP=$(date +%s)
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [[ "${{ github.head_ref }}" == release-please--branches--* ]]; then
              TIME_SUFFIX=$(TZ='Asia/Shanghai' date +%m%d%H%M)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-rc.${TIME_SUFFIX}"
            else
              PR_NUMBER=${{ github.event.number }}
              PR_COMMIT_COUNT=$(git rev-list --count HEAD ^origin/main)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.${PR_NUMBER}.${PR_COMMIT_COUNT}"
            fi
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TIME_SUFFIX=$(echo $TIMESTAMP | tail -c 5)
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-beta.${COMMIT_COUNT}.${TIME_SUFFIX}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TIME_SUFFIX=$(TZ='Asia/Shanghai' date +%m%d%H%M)
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-manual.${TIME_SUFFIX}"
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-dev.${BRANCH_NAME}.${{ needs.unified-build.outputs.short_commit_hash }}"
          fi
          
          npm version $NEW_VERSION --no-git-tag-version
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🧹 清理开发依赖
        run: pnpm pkg delete devDependencies

      - name: 🚀 发布预览包
        id: publish_pkg
        run: |
          pnpm dlx pkg-pr-new publish --json output.json --comment=update --compact --packageManager=pnpm > pkg-output.txt 2>&1
          
          ACTUAL_INSTALL_URL=$(grep -oE 'https://pkg\.pr\.new/[^[:space:]`]+' pkg-output.txt | head -n 1 || echo "")
          
          if [ ! -z "$ACTUAL_INSTALL_URL" ]; then
            PNPM_INSTALL_CMD="pnpm add ${ACTUAL_INSTALL_URL} -w"
          else
            PNPM_INSTALL_CMD="未找到安装命令"
          fi
          
          echo "pnpm_install_cmd=$PNPM_INSTALL_CMD" >> $GITHUB_OUTPUT

      - name: 💬 发布 PR 评论
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功
            
            ### 🏷️ 包信息
            - **版本:** `${{ steps.version-gen.outputs.version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})
            
            ### 📥 安装命令
            ```bash
            ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
            ```
            
            ### 🖥️ Windows 桌面应用
            ${{ inputs.skip_desktop == true && '- **状态:** ⏭️ 已跳过构建' || '- **状态:** 🔄 构建中...' }}
            
            ### 📱 Android 应用
            ${{ inputs.skip_desktop == true && '- **状态:** ⏭️ 已跳过构建' || '- **状态:** 🔄 构建中...' }}
            ${{ inputs.skip_desktop != true && '- **架构:** aarch64' || '' }}
            
            ---
            ${{ inputs.skip_desktop != true && '> 💡 桌面和移动应用构建完成后将自动更新此评论' || '' }}
          comment-tag: published-packages
          mode: upsert
          reactions: rocket

  # 桌面应用 EXE 构建
  desktop-build:
    runs-on: ubuntu-latest
    needs: [version-release, unified-build, preview-package-publish]
    if: |
      needs.unified-build.outputs.build_success == 'true' && 
      (github.event_name != 'workflow_dispatch' || inputs.skip_desktop != true) &&
      (needs.preview-package-publish.result == 'success' || needs.version-release.outputs.should_upload_release == 'true')
    outputs:
      desktop_build_success: ${{ steps.desktop-build.outputs.success }}
      desktop_version: ${{ steps.sync-desktop-version.outputs.desktop_version }}
      desktop_exe_name: ${{ steps.desktop-build.outputs.exe_name }}
      desktop_artifact_url: ${{ steps.desktop-summary.outputs.artifact_url }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 nsis build-essential

      - name: 🦀 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-gnu

      - name: 💾 缓存 Rust 依赖
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/web/src-tauri
          cache-on-failure: true
          shared-key: ${{ env.APP_NAME }}-desktop-build

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📦 安装依赖
        run: pnpm install

      - name: 🔄 同步版本号到桌面应用配置
        id: sync-desktop-version
        run: |
          CORE_VERSION="${{ needs.version-release.outputs.core_version }}"
          echo "同步版本号: $CORE_VERSION"
          
          # 更新 tauri.conf.json 中的版本号
          configPath="packages/web/src-tauri/tauri.conf.json"
          jq --arg version "$CORE_VERSION" '.version = $version' "$configPath" > tmp.json && mv tmp.json "$configPath"
          
          # 更新 Cargo.toml 中的版本号
          cargoPath="packages/web/src-tauri/Cargo.toml"
          sed -i "s/^version = \".*\"/version = \"$CORE_VERSION\"/" "$cargoPath"
          
          echo "desktop_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "✅ 版本号已同步为: $CORE_VERSION"

      - name: 🔧 配置交叉编译环境
        run: |
          # 设置 MinGW 工具链环境变量
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          
          # 验证工具链
          x86_64-w64-mingw32-gcc --version
          x86_64-w64-mingw32-g++ --version

      - name: 📱 构建桌面应用 (Windows)
        id: desktop-build
        run: |
          echo "开始构建桌面应用..."
          
          cd packages/web
          
          # 设置详细日志
          export RUST_LOG=info
          
          # 构建桌面应用 (使用 GNU 工具链)
          echo "🚀 开始构建 (使用 GNU 工具链)..."
          if pnpm tauri build --target x86_64-pc-windows-gnu; then
            echo "success=true" >> $GITHUB_OUTPUT
            
            # 查找安装程序
            INSTALLER_PATH=$(find "$PWD/src-tauri/target/x86_64-pc-windows-gnu/release/bundle" -type f \( -name "*.exe" -o -name "*.msi" \) 2>/dev/null | head -1)
            
            if [ -n "$INSTALLER_PATH" ]; then
              INSTALLER_NAME=$(basename "$INSTALLER_PATH")
              RELATIVE_PATH=$(realpath --relative-to="$PWD" "$INSTALLER_PATH")
              echo "exe_path=$RELATIVE_PATH" >> $GITHUB_OUTPUT
              echo "exe_name=$INSTALLER_NAME" >> $GITHUB_OUTPUT
              echo "✅ 找到安装程序: $INSTALLER_PATH"
            else
              echo "❌ 未找到任何安装程序"
              echo "🔍 列出构建产物:"
              find src-tauri/target -name "*.exe" -o -name "*.msi" 2>/dev/null || echo "无构建产物"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "❌ 桌面应用构建失败"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📤 上传桌面应用构建产物
        if: steps.desktop-build.outputs.success == 'true'
        id: upload-desktop-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.desktop-build.outputs.exe_name }}
          path: packages/web/${{ steps.desktop-build.outputs.exe_path }}
          retention-days: 30
          compression-level: 0

      - name: 🚀 上传到Release
        if: |
          steps.desktop-build.outputs.success == 'true' && 
          needs.version-release.outputs.should_upload_release == 'true' && 
          needs.version-release.outputs.release_tag_name != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-release.outputs.release_tag_name }}
          files: packages/web/${{ steps.desktop-build.outputs.exe_path }}
          name: ${{ steps.desktop-build.outputs.exe_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 生成桌面应用信息
        if: steps.desktop-build.outputs.success == 'true'
        id: desktop-summary
        run: |
          ARTIFACT_ID="${{ steps.upload-desktop-artifact.outputs.artifact-id }}"
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/$ARTIFACT_ID"
          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
          
          echo "## 🖥️ Windows桌面应用构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 应用信息" >> $GITHUB_STEP_SUMMARY
          echo "- **平台:** Windows x64" >> $GITHUB_STEP_SUMMARY
          echo "- **文件名:** \`${{ steps.desktop-build.outputs.exe_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ steps.sync-desktop-version.outputs.desktop_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **基于Core版本:** \`${{ needs.version-release.outputs.core_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 下载方式" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **直接下载:** [点击下载 ${{ steps.desktop-build.outputs.exe_name }}]($ARTIFACT_URL)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.version-release.outputs.should_upload_release }}" = "true" ] && [ "${{ needs.version-release.outputs.release_tag_name }}" != "" ]; then
            echo "- 🚀 **Release下载:** [点击这里下载最新版本](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version-release.outputs.release_tag_name }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Android APK 构建
  android-build:
    runs-on: ubuntu-latest
    needs: [version-release, unified-build, preview-package-publish]
    if: |
      needs.unified-build.outputs.build_success == 'true' && 
      (github.event_name != 'workflow_dispatch' || inputs.skip_desktop != true) &&
      (needs.preview-package-publish.result == 'success' || needs.version-release.outputs.should_upload_release == 'true')
    outputs:
      android_build_success: ${{ steps.android-build.outputs.success }}
      android_version: ${{ steps.sync-android-version.outputs.android_version }}
      android_apk_name: ${{ steps.android-build.outputs.apk_name }}
      android_artifact_url: ${{ steps.android-summary.outputs.artifact_url }}
    
    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🤖 配置 Gradle 环境
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: 🤖 配置 Android 开发环境
        uses: android-actions/setup-android@v3

      - name: 🦀 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: 💾 缓存 Rust 依赖和构建产物
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/web/src-tauri
          cache-on-failure: true
          shared-key: ${{ env.APP_NAME }}-android-build

      - name: 💾 缓存 Gradle 依赖和构建缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            packages/web/src-tauri/gen/android/.gradle
            packages/web/src-tauri/gen/android/app/build
            packages/web/src-tauri/gen/android/app/.cxx
          key: gradle-${{ runner.os }}-${{ hashFiles('packages/web/src-tauri/gen/android/**/*.gradle*', 'packages/web/src-tauri/gen/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: 💾 缓存 Android 构建产物
        uses: actions/cache@v4
        with:
          path: |
            packages/web/src-tauri/gen/android/app/build/intermediates
            packages/web/src-tauri/gen/android/app/build/generated
            packages/web/src-tauri/gen/android/app/build/kotlin
            packages/web/src-tauri/gen/android/app/build/tmp
            packages/web/src-tauri/gen/android/app/src/main/jniLibs
          key: android-build-${{ runner.os }}-${{ hashFiles('packages/web/src-tauri/Cargo.toml', 'packages/web/src-tauri/src/**/*.rs') }}
          restore-keys: |
            android-build-${{ runner.os }}-

      - name: 🔍 检查缓存恢复状态
        run: |
          echo "=== Rust Target 目录状态 ==="
          if [ -d "packages/web/src-tauri/target" ]; then
            echo "✅ Rust target目录存在"
            ls -la packages/web/src-tauri/target/
            if [ -d "packages/web/src-tauri/target/aarch64-linux-android" ]; then
              echo "✅ Android target存在"
              ls -la packages/web/src-tauri/target/aarch64-linux-android/
            else
              echo "❌ Android target不存在，需要重新构建"
            fi
          else
            echo "❌ Rust target目录不存在"
          fi
          
          echo "=== Android 构建缓存状态 ==="
          if [ -d "packages/web/src-tauri/gen/android/app/build" ]; then
            echo "✅ Android构建目录存在"
            ls -la packages/web/src-tauri/gen/android/app/build/
          else
            echo "❌ Android构建目录不存在"
          fi
          
          echo "=== JNI库状态 ==="
          if [ -d "packages/web/src-tauri/gen/android/app/src/main/jniLibs" ]; then
            echo "✅ JNI库目录存在"
            find packages/web/src-tauri/gen/android/app/src/main/jniLibs -name "*.so" | head -10
          else
            echo "❌ JNI库目录不存在"
          fi

      - name: ☕ 配置 Java 环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📦 安装依赖
        run: pnpm install

      - name: 🔧 配置 Android 构建环境
        run: |
          # 设置 Android 环境变量
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          
          # 明确设置NDK路径
          NDK_VERSION="28.2.13676358"
          NDK_PATH="$ANDROID_SDK_ROOT/ndk/$NDK_VERSION"
          
          # 验证NDK是否存在
          if [ ! -d "$NDK_PATH" ]; then
            echo "❌ NDK $NDK_VERSION 未找到，尝试安装..."
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "ndk;$NDK_VERSION"
            
            # 再次检查
            if [ ! -d "$NDK_PATH" ]; then
              echo "❌ NDK 安装失败，查找可用版本..."
              ls -la $ANDROID_SDK_ROOT/ndk/
              # 使用找到的第一个NDK版本
              NDK_PATH=$(find $ANDROID_SDK_ROOT/ndk -maxdepth 1 -type d -name "*.*.*" | head -1)
              if [ -z "$NDK_PATH" ]; then
                echo "❌ 未找到任何NDK版本"
                exit 1
              fi
              NDK_VERSION=$(basename "$NDK_PATH")
            fi
          fi
          
          echo "NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
          echo "✅ NDK 路径设置为: $NDK_PATH (版本: $NDK_VERSION)"
          
          # 验证链接器是否存在
          LINKER_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android36-clang"
          if [ ! -f "$LINKER_PATH" ]; then
            echo "❌ 链接器不存在: $LINKER_PATH"
            echo "查找可用的链接器..."
            find $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/ -name "aarch64-linux-android*-clang" | head -5
            
            # 尝试使用可用的API级别
            AVAILABLE_LINKER=$(find $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/ -name "aarch64-linux-android*-clang" | head -1)
            if [ -n "$AVAILABLE_LINKER" ]; then
              API_LEVEL=$(basename "$AVAILABLE_LINKER" | sed 's/aarch64-linux-android\([0-9]*\)-clang/\1/')
              echo "✅ 使用可用的API级别: $API_LEVEL"
              LINKER_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang"
            else
              echo "❌ 未找到任何aarch64链接器"
              exit 1
            fi
          fi
          
          # 配置 Rust 交叉编译工具链
          echo "CC_aarch64_linux_android=$LINKER_PATH" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=${LINKER_PATH}++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$LINKER_PATH" >> $GITHUB_ENV
          
          echo "✅ Rust交叉编译环境配置完成"

      # 同步版本号到 Android 配置
      - name: 🔄 同步版本号到 Android 应用配置
        id: sync-android-version
        run: |
          CORE_VERSION="${{ needs.version-release.outputs.core_version }}"
          echo "同步版本号: $CORE_VERSION"
          
          # 更新 tauri.conf.json 中的版本号
          configPath="packages/web/src-tauri/tauri.conf.json"
          jq --arg version "$CORE_VERSION" '.version = $version' "$configPath" > tmp.json && mv tmp.json "$configPath"
          
          # 更新 Cargo.toml 中的版本号
          cargoPath="packages/web/src-tauri/Cargo.toml"
          sed -i "s/^version = \".*\"/version = \"$CORE_VERSION\"/" "$cargoPath"
          
          echo "android_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Android 版本号已同步为: $CORE_VERSION"

      - name: 📱 构建 Android APK (aarch64)
        id: android-build
        run: |
          echo "开始构建 Android APK (aarch64 架构)..."
          
          cd packages/web
          
          # 构建Android APK，如果失败立即退出
          if pnpm build:android; then
            echo "success=true" >> $GITHUB_OUTPUT
            
            # 查找构建产物
            APK_PATH=$(find src-tauri/gen/android -name "*.apk" | head -1)
            
            if [ -n "$APK_PATH" ]; then
              APK_NAME=$(basename "$APK_PATH")
              echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
              echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
              echo "找到 APK 文件: $APK_PATH"
              echo "文件名: $APK_NAME"
            else
              echo "❌ 未找到 APK 文件"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1  # 立即终止
            fi
          else
            echo "❌ Android APK 构建失败"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1  # 立即终止
          fi

      - name: 📤 上传 Android APK 构建产物
        if: steps.android-build.outputs.success == 'true'
        id: upload-android-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.android-build.outputs.apk_name }}
          path: packages/web/${{ steps.android-build.outputs.apk_path }}
          retention-days: 30
          compression-level: 0

      - name: 🚀 上传 APK 到 Release
        if: |
          steps.android-build.outputs.success == 'true' && 
          needs.version-release.outputs.should_upload_release == 'true' && 
          needs.version-release.outputs.release_tag_name != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-release.outputs.release_tag_name }}
          files: packages/web/${{ steps.android-build.outputs.apk_path }}
          name: ${{ steps.android-build.outputs.apk_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 生成 Android 应用信息
        if: steps.android-build.outputs.success == 'true'
        id: android-summary
        run: |
          ARTIFACT_ID="${{ steps.upload-android-artifact.outputs.artifact-id }}"
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/$ARTIFACT_ID"
          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
          
          echo "## 📱 Android APK 构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 应用信息" >> $GITHUB_STEP_SUMMARY
          echo "- **平台:** Android (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "- **文件名:** \`${{ steps.android-build.outputs.apk_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ steps.sync-android-version.outputs.android_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **基于Core版本:** \`${{ needs.version-release.outputs.core_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 下载方式" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **直接下载:** [点击下载 ${{ steps.android-build.outputs.apk_name }}]($ARTIFACT_URL)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.version-release.outputs.should_upload_release }}" = "true" ] && [ "${{ needs.version-release.outputs.release_tag_name }}" != "" ]; then
            echo "- 🚀 **Release下载:** [点击这里下载最新版本](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version-release.outputs.release_tag_name }})" >> $GITHUB_STEP_SUMMARY
          fi

  # 桌面应用构建完成后立即更新评论
  update-pr-comment-desktop:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish, desktop-build]
    if: github.event_name == 'pull_request' && always() && needs.desktop-build.result != 'skipped'
    steps:
      - name: 💬 更新桌面应用构建状态
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功
            
            ### 🏷️ 包信息
            - **版本:** `${{ needs.preview-package-publish.outputs.pkg_version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})
            
            ### 📥 安装命令
            ```bash
            ${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}
            ```
            
            ### 🖥️ Windows 桌面应用
            ${{ needs.desktop-build.result == 'success' && '- **状态:** ✅ 构建成功' || '- **状态:** ❌ 构建失败' }}
            ${{ needs.desktop-build.result == 'success' && format('- **版本:** `{0}`', needs.desktop-build.outputs.desktop_version) || '' }}
            ${{ needs.desktop-build.result == 'success' && format('- **下载:** [点击下载]({0})', needs.desktop-build.outputs.desktop_artifact_url) || '' }}
            
            ### 📱 Android 应用
            - **状态:** 🔄 构建中...
            - **架构:** aarch64
            
            ---
            > 💡 Android 应用构建完成后将自动更新此评论
          comment-tag: published-packages
          mode: upsert
          reactions: rocket

  # Android应用构建完成后更新评论
  update-pr-comment-android:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish, desktop-build, android-build]
    if: github.event_name == 'pull_request' && always() && needs.android-build.result != 'skipped'
    steps:
      - name: 💬 更新最终构建状态
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功
            
            ### 🏷️ 包信息
            - **版本:** `${{ needs.preview-package-publish.outputs.pkg_version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})
            
            ### 📥 安装命令
            ```bash
            ${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}
            ```
            
            ### 🖥️ Windows 桌面应用
            ${{ needs.desktop-build.result == 'success' && '- **状态:** ✅ 构建成功' || (needs.desktop-build.result == 'skipped' && '- **状态:** ⏭️ 已跳过构建' || '- **状态:** ❌ 构建失败') }}
            ${{ needs.desktop-build.result == 'success' && format('- **版本:** `{0}`', needs.desktop-build.outputs.desktop_version) || '' }}
            ${{ needs.desktop-build.result == 'success' && format('- **下载:** [点击下载]({0})', needs.desktop-build.outputs.desktop_artifact_url) || '' }}
            
            ### 📱 Android 应用
            ${{ needs.android-build.result == 'success' && '- **状态:** ✅ 构建成功' || '- **状态:** ❌ 构建失败' }}
            ${{ needs.android-build.result == 'success' && format('- **版本:** `{0}`', needs.android-build.outputs.android_version) || '' }}
            ${{ needs.android-build.result == 'success' && format('- **架构:** aarch64') || '' }}
            ${{ needs.android-build.result == 'success' && format('- **下载:** [点击下载]({0})', needs.android-build.outputs.android_artifact_url) || '' }}
            
            ---
          comment-tag: published-packages
          mode: upsert
          reactions: rocket, hooray

  build-summary:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish, desktop-build, android-build]
    if: always() && needs.unified-build.outputs.build_success == 'true'
    steps:
      - name: 📊 生成完整构建摘要
        run: |
          echo "# 🚀 构建完成摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM 包信息
          if [ "${{ needs.preview-package-publish.result }}" = "success" ]; then
            echo "## 📦 NPM 预览包" >> $GITHUB_STEP_SUMMARY
            echo "- **版本:** \`${{ needs.preview-package-publish.outputs.pkg_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **安装命令:** \`${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 桌面应用信息
          if [ "${{ needs.desktop-build.result }}" = "success" ]; then
            echo "## 🖥️ Windows 桌面应用" >> $GITHUB_STEP_SUMMARY
            echo "- **状态:** ✅ 构建成功" >> $GITHUB_STEP_SUMMARY
            echo "- **版本:** \`${{ needs.desktop-build.outputs.desktop_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **下载:** [点击下载](${{ needs.desktop-build.outputs.desktop_artifact_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.desktop-build.result }}" = "failure" ]; then
            echo "## 🖥️ Windows 桌面应用" >> $GITHUB_STEP_SUMMARY
            echo "- **状态:** ❌ 构建失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Android 应用信息
          if [ "${{ needs.android-build.result }}" = "success" ]; then
            echo "## 📱 Android 应用" >> $GITHUB_STEP_SUMMARY
            echo "- **状态:** ✅ 构建成功" >> $GITHUB_STEP_SUMMARY
            echo "- **版本:** \`${{ needs.android-build.outputs.android_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **架构:** aarch64" >> $GITHUB_STEP_SUMMARY
            echo "- **下载:** [点击下载](${{ needs.android-build.outputs.android_artifact_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.android-build.result }}" = "failure" ]; then
            echo "## 📱 Android 应用" >> $GITHUB_STEP_SUMMARY
            echo "- **状态:** ❌ 构建失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi