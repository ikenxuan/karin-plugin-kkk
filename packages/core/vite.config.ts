import fs from 'node:fs'
import { builtinModules } from 'node:module'
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'

import tailwindcss from '@tailwindcss/vite'
import react from '@vitejs/plugin-react-swc'
import { defineConfig, type Plugin } from 'vite'

// Âú®ESÊ®°Âùó‰∏≠Ê®°Êãü__dirname
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const entry: string[] = ['src/index.ts', 'src/root.ts', 'src/export/template.ts']

const getFiles = (dir: string) => {
  fs.readdirSync(dir).forEach((file) => {
    if (file.endsWith('.ts')) {
      entry.push(`${dir}/${file}`)
    }
  })
}

getFiles('src/apps')

/**
 * ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï web.config.js ÁöÑ Vite Êèí‰ª∂
 * @description ËØ•Êèí‰ª∂‰ºöÂú®ÊûÑÂª∫ÂÆåÊàêÂêé:
 * 1. Êü•ÊâæÂåÖÂê´ web.config ÁöÑ‰∏ª chunk Êñá‰ª∂
 * 2. ‰ªé‰∏ª chunk ‰∏≠ÊèêÂèñ webConfig ÁöÑÂØºÂá∫Âà´Âêç
 * 3. Âú® lib ÁõÆÂΩï‰∏ãÂàõÂª∫ web.config.js Êñá‰ª∂
 * 4. ÈáçÊñ∞ÂØºÂá∫ webConfig ‰∏∫ÈªòËÆ§ÂØºÂá∫
 */
const createWebConfigPlugin = (): Plugin => {
  return {
    name: 'create-web-config',
    writeBundle: (options, bundle) => {
      // Êü•ÊâæÂåÖÂê´ web.config ÁöÑ main chunk
      const mainChunkFile = Object.keys(bundle).find(fileName => {
        return fileName.startsWith('core_chunk/main-') && fileName.endsWith('.js')
      })

      if (mainChunkFile) {
        // ËØªÂèñ main chunk Êñá‰ª∂ÂÜÖÂÆπ
        const mainChunkPath = resolve(__dirname, 'lib', mainChunkFile)
        const mainChunkContent = fs.readFileSync(mainChunkPath, 'utf-8')

        // ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÊü•Êâæ webConfig ÁöÑÂØºÂá∫Âà´Âêç
        const webConfigExportMatch = mainChunkContent.match(/webConfig as (\w+)/)
        const webConfigAlias = webConfigExportMatch ? webConfigExportMatch[1] : 'webConfig'

        // Âú® lib ÁõÆÂΩï‰∏≠ÂàõÂª∫ web.config.js
        const webConfigContent = `export { ${webConfigAlias} as default } from './${mainChunkFile}';\n`
        const outputPath = resolve(__dirname, 'lib', 'web.config.js')
        fs.writeFileSync(outputPath, webConfigContent)
        console.log(`‚úì Created lib/web.config.js -> ./${mainChunkFile} (alias: ${webConfigAlias})`)
      } else {
        console.warn('‚ö† Could not find main chunk file')
        // ÂàóÂá∫ÊâÄÊúâÂèØÁî®ÁöÑ chunk Êñá‰ª∂‰ª•‰æøË∞ÉËØï
        console.log('Available chunks:', Object.keys(bundle).filter(f => f.endsWith('.js')))
      }
    }
  }
}

/**
 * ÈÄíÂΩíÂ§çÂà∂ÁõÆÂΩï
 * @param sourceDir Ê∫êÁõÆÂΩïË∑ØÂæÑ
 * @param targetDir ÁõÆÊ†áÁõÆÂΩïË∑ØÂæÑ
 */
const copyDirectory = (sourceDir: string, targetDir: string) => {
  if (!fs.existsSync(sourceDir)) {
    console.warn('‚ö†Ô∏è Ê∫êÁõÆÂΩï‰∏çÂ≠òÂú®:', sourceDir)
    return
  }

  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true })
  }

  const files = fs.readdirSync(sourceDir)

  files.forEach(file => {
    const sourcePath = resolve(sourceDir, file)
    const targetPath = resolve(targetDir, file)

    if (fs.statSync(sourcePath).isDirectory()) {
      copyDirectory(sourcePath, targetPath)
    } else {
      fs.copyFileSync(sourcePath, targetPath)
    }
  })
}

/**
 * Â§çÂà∂ template ÈùôÊÄÅËµÑÊ∫êÁöÑ Vite Êèí‰ª∂
 * @description Âú®ÊûÑÂª∫Êó∂Â∞Ü template ÂåÖÁöÑÈùôÊÄÅËµÑÊ∫êÂ§çÂà∂Âà∞ core ÂåÖÁöÑ resources ÁõÆÂΩï
 */
const copyTemplateAssetsPlugin = (): Plugin => {
  return {
    name: 'copy-template-assets',
    writeBundle () {
      // Â§çÂà∂ template ÂåÖÁöÑÈùôÊÄÅËµÑÊ∫ê
      const SourceDir = resolve(__dirname, '../template/public')
      const TargetDir = resolve(__dirname, 'resources')

      console.log('üîç ÂºÄÂßãÂ§çÂà∂ template ÈùôÊÄÅËµÑÊ∫ê...')
      console.log('üìÅ Ê∫êÁõÆÂΩï:', SourceDir)
      console.log('üìÅ ÁõÆÊ†áÁõÆÂΩï:', TargetDir)

      copyDirectory(SourceDir, TargetDir)
      console.log('‚úÖ template ÈùôÊÄÅËµÑÊ∫êÂ∑≤Â§çÂà∂Âà∞:', TargetDir)
    }
  }
}

export default defineConfig({
  define: {
    __dirname: 'new URL(".", import.meta.url).pathname',
    __filename: 'new URL("", import.meta.url).pathname'
  },
  build: {
    target: 'node21',
    lib: {
      formats: ['es'],
      entry
    },
    emptyOutDir: true,
    outDir: 'lib',
    // ‰ΩøÁî® rolldownOptionsÔºàÊåâ‰Ω†ÁöÑË¶ÅÊ±ÇÔºâ
    rolldownOptions: {
      platform: 'node',
      external: [
        // Node ÂÜÖÂª∫Ê®°Âùó‰øùÊåÅ external
        ...builtinModules,
        ...builtinModules.map((mod) => `node:${mod}`),
        // ‰Ω†ÁöÑ node-karin Áõ∏ÂÖ≥ external
        ...['', '/express', '/root', '/lodash', '/yaml', '/axios', '/log4js', '/template', '/sqlite3'].map(p => `node-karin${p}`)
      ],
      output: {
        // ‰Ω†Ë¶ÅÊ±ÇÂøÖÈ°ªÂºÄÂêØÔºöÂÜÖËÅîÂä®ÊÄÅÂØºÂÖ•ÔºåÊî∂Êïõ chunk Êï∞Èáè
        inlineDynamicImports: true,
        format: 'esm',
        entryFileNames: (chunkInfo) => {
          if (chunkInfo.name === 'index' || chunkInfo.name === 'root') {
            return `${chunkInfo.name}.js`
          }
          if (chunkInfo.facadeModuleId?.includes('src/apps')) {
            return `apps/${chunkInfo.name}.js`
          }
          return `core_chunk/${chunkInfo.name}.js`
        },
        chunkFileNames: 'core_chunk/[name]-[hash].js',

        // advancedChunks È°∂Â±ÇÈîÆÔºåÈÅøÂÖç TS Êä•Èîô
        advancedChunks: {
          includeDependenciesRecursively: true,
          minSize: 1024 * 200,
          minShareCount: 2,
          groups: [
            { name: 'vendor', test: /[\\\/]node_modules[\\\/]/, priority: 100 },
            { name: 'template', test: /[\\\/]template[\\\/]/, priority: 90 },
            { name: 'root', test: /[\\\/]src[\\\/]root\.ts$/, priority: 1000 },
            { name: 'db', test: /[\\\/]src[\\\/]module[\\\/]db/, priority: 70 },
            { name: 'main', test: /[\\\/]src[\\\/]/, priority: 0 }
          ]
        }
      }
    },
    minify: false,
    commonjsOptions: {
      include: [/node_modules/],
      transformMixedEsModules: true,
      defaultIsModuleExports: true
    }
  },
  resolve: {
    conditions: ['node'],
    alias: {
      '@': resolve(__dirname, './src'),
      template: resolve(__dirname, '../template/src/client.ts')
    }
  },
  plugins: [
    react(),
    tailwindcss(),
    createWebConfigPlugin(),
    copyTemplateAssetsPlugin()
  ]
})